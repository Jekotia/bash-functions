#! /bin/bash

# The version of the function file in format "x.y.z".
export JLB_INIT_VERSION=1.0.0

# Public: Primary initialisation system for library
#
# Sources core functions and runs the loader.
#
# $1 - Path the directory containing this init file.
# $2 - OPTIONAL: 
#
# Examples
#
#   init "${jlb_root}"
#
# Returns 0 unless jlb::loader fails.
function jlb::init() {
	local	errcode \
			   path="${*}"

	#-> SOURCE CORE FUNCTION FILES
	# shellcheck disable=SC1090
	source "${path}/formatting" || exit 1
	# shellcheck disable=SC1090
	source "${path}/debug" || exit 1
	# shellcheck disable=SC1090
	source "${path}/funcStart" || exit 1
	# shellcheck disable=SC1090
	source "${path}/funcEnd" || exit 1
	# shellcheck disable=SC1090
	source "${path}/printerr" || exit 1
	# shellcheck disable=SC1090
	source "${path}/loader" || exit 1

	#-> CALL THE LOADER ON THE PROJECT ROOT
	if ! jlb::loader "${path}" "0" "*.sh" ; then
		#shellcheck disable=SC2034
		errcode=1
	fi

	jlb::debug "end ${path}/init"
}

JLB_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# Root directory containing this repos' function file structure
export JLB_ROOT

#-> CHECK IF THE --debug FLAG HAS BEEN PASSED. IF SO, REMOVES IT AND SETS THE DEBUG VARIABLE TO true
case $1 in
	--debug)
		shift
		# Variable for confirming if debug mode is on
		export JLB_DEBUG=true

		# Variable for tracking the nesting depth of functions
		export JLB_DEBUG_DEPTH=0

#		>&2 printf "DEBUG %s\n" "${debug_str}"
		>&2 printf "DEBUG STATEMENTS ENABLED. THESE WILL GO TO STDERR SO AS NOT TO CONTAMINATE STRING RETURNS\n"
	;;
esac

if [ -z "${JLB_TESTS+x}" ] ; then
	# Variable for confirming if testing mode is on
	export JLB_TESTS=false
else
	printf "Executing with JLB_TESTS=true\n"
fi

#jlb::init "${JLB_ROOT}" || exit 1
