#! /bin/bash

# The version of the function file in format "x.y.z".
export JLB_LOADER_VERSION=1.0.0

# Public: Primary function-file loader.
#
# Sources all files under the specified tree, to the specified depth, matching
# the specified glob.
#
# $1 - Path to begin in.
# $2 - Maximum directory depth to search at. Integer; 0 for full tree.
# $3 - File-name matching glob
#
# Examples
#
#   jlb::loader "./functions" "0" "*.sh"
#
# Returns a result of 0 unless it fails to source a file (i.e. syntax error in file)
function jlb::loader() {
	jlb::funcStart

#-> PREP
	local path			#-> VARIABLE CONTAINING STARTING PATH
	local max_depth		#-> VARIABLE CONTAINING MAXIMUM DEPTH
	local str			#-> VARIABLE CONTAINING FILE MATCHING GLOB
	local depth			#-> VARIABLE FOR TRACKING CURRENT DEPTH
	local depth_str		#-> VARIABLE FOR BUILDING DEPTH-BASED PATH TO SOURCE FROM
	local status 		#-> VARIABLE FOR STORING THE EXIT CODE OF THE LAST OPERATION

	path="${1}"			; shift
	max_depth="${1}"	; shift
	str="${1}"			; shift
	depth=1
	depth_str=""


	if [[ "${max_depth}" == "0" ]] ; then
		#-> DETERMINE MAXIMUM DEPTH OF $path DIRECTORY TREE
		max_depth=$(find "${path}" \( ! -regex '.*/\..*' \) -type d -printf '%d\n' | sort -rn | head -1)
		#-> INCREMENT MAX DEPTH BY ONE, SINCE IT COMES UP SHORT FOR OUR PURPOSES
		((max_depth++))

		jlb::debug "Maximum loader depth: ${max_depth} (max)"
	else
		jlb::debug "Maximum loader depth: ${max_depth}"
	fi

	local depth=0
	local depth_str=""

#-> EXECUTION
	#-> WHILE CURRENT DEPTH IS BELOW MAX DEPTH, DO STUFF
	while [[ ${depth} -lt "${max_depth}" ]] ; do
		((depth++))

		local target="${path}/${depth_str}${str}"
		jlb::debug "Sourcing at depth ${depth} in directory ${path}/${depth_str}"

		#-> LOOP FOR EACH FILE AT THE PATH EXPRESSED BY $SOURCE_PATH
#		for f in `ls -v ${target}` ; do
		for f in ${target} ; do
			#-> VERIFY THAT THERE ARE .sh FILES AT THIS LEVEL TO AVOID ERRORS
			#-> IF THERE ARE, CONTINUE SOURCING. IF NOT, CONTINUE BUT DO NOTHING
			files=$(shopt -s nullglob dotglob; echo "${target}")
			if (( ${#files} )) ; then
				# shellcheck disable=1090
				source "$f"
				status=$?
				if [ ${status} -ne 0 ] ; then
					errcode=1

					jlb::debug "Failed to source $f"

					jlb::funcEnd "${errcode}" ; return ${errcode}
				else
					jlb::debug "Sourced file: $f"
				fi
			else
				jlb::debug "empty (or does not exist, or is not a .sh file)"
			fi
		done

		#-> INCREASE THE DEPTH EXPRESSED
		depth_str="${depth_str}*/"
	done

	jlb::funcEnd
	return 0
}
