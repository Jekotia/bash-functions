#! /bin/bash

# The version of the function file in format "x.y.z".
export JLB_DEBUG_VERSION=1.0.0

# Overridable variable for controlling debug output prefix
JLB_DEBUG_PREFIX="DEBUG "

# Public: Prints to the terminal if --debug is passed at execution
#
# Prints the provided string to the terminal, via jlb::printerr(), if
# the --debug flag is passed at the time of script execution.
# When used in conjunction with funcStart() and funcEnd(), adjusts
# indentation automatically to better illustrate the nesting of
# functions.
# Prints to stderr so as not to contaminate the output of functions
# designed to return strings.
#
# $1 - String to be printed.
#
# Examples
#
#   jlb::debug "Successfully executed $cmd"
#
# Always returns 0.
function jlb::debug() {
	if [[ "$JLB_DEBUG" == "true" ]] ; then
		local str
		local debug_str
		local debug_depth_str
		local debug_depth_loop

		str="${*}"
		debug_depth_str="${debug_depth_str}"

		if [[ ! -z "${str}" ]] ; then
			debug_depth_loop=0

			while [ ${debug_depth_loop} -lt "${JLB_DEBUG_DEPTH}" ] ; do
				debug_depth_str="${debug_depth_str} "
				((debug_depth_loop++))
			done

			debug_str="${debug_depth_str}> ${str}"
			if [[ "$JLB_TEST" == "true" ]] ; then
				printf "${JLB_DEBUG_PREFIX}%s\n" "${debug_str}"
			else
				>&2 printf "${JLB_DEBUG_PREFIX}%s\n" "${debug_str}"
			fi
		fi
	fi

	return 0
}

jlb::debug "Sourced file: ${BASH_SOURCE[0]}"
